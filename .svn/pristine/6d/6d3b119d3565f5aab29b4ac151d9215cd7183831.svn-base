package com.ylife.chinapost.security;

import com.ylife.authority.model.Authority;
import com.ylife.authority.model.ResourcePage;
import com.ylife.chinapost.security.service.EnterpriseSecurityService;
import org.springframework.security.access.ConfigAttribute;
import org.springframework.security.access.SecurityConfig;
import org.springframework.security.web.FilterInvocation;
import org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource;
import org.springframework.security.web.util.AntPathRequestMatcher;
import org.springframework.security.web.util.RequestMatcher;

import javax.annotation.PostConstruct;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.util.*;

/**
 * 用于生成securityMetadataSource。
 */
public class EnterpriseSecurityMetadataSource implements FilterInvocationSecurityMetadataSource {

    private HashMap<RequestMatcher, Collection<ConfigAttribute>> requestMap = new HashMap<>();
    private Collection<ConfigAttribute> allAttribute = new HashSet<>();

    @Resource
    private EnterpriseSecurityService enterpriseSecurityService;

    @Override
    public Collection<ConfigAttribute> getAllConfigAttributes() {
        return this.allAttribute;
    }

    @Override
    public boolean supports(Class<?> clazz) {
        return true;
    }

    //获取资源所需权限。这里仅仅放入资源的ID
    @Override
    public Collection<ConfigAttribute> getAttributes(Object object) throws IllegalArgumentException {
        //初始化数据源
        initResources();
        // 把对象转化为请求
        final HttpServletRequest request = ((FilterInvocation) object)
                .getRequest();
        // 循环整个Map 看看有没有可以匹配的,如果有匹配的就立刻返回
        Collection<ConfigAttribute> attrHashMap = new HashSet<ConfigAttribute>();
        for (Map.Entry<RequestMatcher, Collection<ConfigAttribute>> entry : requestMap
                .entrySet()) {
            if (entry.getKey().matches(request)) {
                attrHashMap.addAll(entry.getValue());
            }
        }
        if (attrHashMap.size() > 0) {
            // 如果有匹配的就转成ArrayList,然后返回list
            Collection<ConfigAttribute> attr = new ArrayList<ConfigAttribute>(
                    attrHashMap);
            return attr;
        }else {//如果没有，查看上级url权限
            ResourcePage resourcePage = enterpriseSecurityService.getParentUrlByUrl(request.getServletPath());
            if(resourcePage!=null) {
                RequestMatcher parentRequestMatcher = new AntPathRequestMatcher(resourcePage.getUrl());
                for (Map.Entry<RequestMatcher, Collection<ConfigAttribute>> entry : requestMap
                        .entrySet()) {
                    if (entry.getKey().equals(parentRequestMatcher)) {
                        attrHashMap.addAll(entry.getValue());
                    }
                }
                if (attrHashMap.size() > 0) {
                    // 如果有匹配的就转成ArrayList,然后返回list
                    Collection<ConfigAttribute> attr = new ArrayList<ConfigAttribute>(
                            attrHashMap);
                    return attr;
                }
            }
            return Collections.emptyList();
        }
    }

    @PostConstruct
    public void init()  {
//        initResources();
    }


    /**
     * 初始化所有的资源
     */
    private void initResources(){

        // 读取所有权限点
        Collection<Authority> allAuthority = enterpriseSecurityService.getAllAuthority();
        for (Authority authEntity : allAuthority) {
            SecurityConfig attrConfig = new SecurityConfig(authEntity.getId().toString());
            allAttribute.add(attrConfig);
        }
        // 读取所有资源
        Collection<ResourcePage> allResources = enterpriseSecurityService.getAllResourcePage();
        // 循环所有资源
        for (ResourcePage resourceEntiry : allResources) {
            // 按照资源查询和资源相关的权限点
            Collection<Long> authEntities = enterpriseSecurityService.getAuthorityIdByPageId(resourceEntiry.getId());
            // 把此关系保存到requestMap里
            // 获取资源
            RequestMatcher matcher = new AntPathRequestMatcher(resourceEntiry.getUrl());
            // 循环权限 定义一个权限的集合,和此资源对应起来,添加到HashMap里
            Collection<ConfigAttribute> array = new ArrayList<ConfigAttribute>(
                    authEntities.size());
            for (Long auth : authEntities) {
                // 转化权限对象为SecurityConfig
                SecurityConfig securityConfig = new SecurityConfig(
                        auth.toString());
                array.add(securityConfig);
            }
            requestMap.put(matcher, array);
        }

        System.out.println(requestMap);
    }

}