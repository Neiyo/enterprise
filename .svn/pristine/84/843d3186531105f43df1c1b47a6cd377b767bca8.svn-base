package com.ylife.chinapost.service.impl;

import com.ylife.chinapost.service.CurrentLoginService;
import com.ylife.chinapost.service.FormInfoService;
import com.ylife.chinapost.service.pojo.FormInfo;
import com.ylife.data.page.Page;
import com.ylife.data.page.Pageable;
import com.ylife.enterprise.mapper.EnterpriseFunctionMapper;
import com.ylife.enterprise.model.EnterpriseFunction;
import com.ylife.form.model.CustomerConsume;
import com.ylife.form.model.FormFunc;
import com.ylife.form.model.FormTime;
import com.ylife.form.model.UcoinGrandForm;
import com.ylife.form.service.FormFuncService;
import com.ylife.utils.DateUtil;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

/**
 * Created by Administrator on 2016/8/5.
 */

@Service
public class FormInfoServiceImpl implements FormInfoService {

    @Resource
    private CurrentLoginService currentLoginService;
    @Resource
    private EnterpriseFunctionMapper enterpriseFunctionMapper;
    @Resource
    private FormFuncService formFuncService;


    @Override
    public FormInfo getReportInfo(Date start, Date end) {
        Long enterpriseId=currentLoginService.getCurrentLoginEnterpriseId();
        FormInfo info=new FormInfo();
        EnterpriseFunction function=enterpriseFunctionMapper.selectByPrimaryKey(enterpriseId);
        Long maxCatalog=function.getMaxCatalog();
        Long minCatalog=function.getMinCatalog();
        Date now =new Date();
        Date today=DateUtil.getMorning(now);
        Date yearStart=DateUtil.getStartYear(now);

        FormTime historyToday=formFuncService.getReportInfoByTime(maxCatalog, minCatalog, today, now);
        Long newCustomerToday=formFuncService.getNewCustomerByTime(maxCatalog,minCatalog,today,now);
        info.setExpenditureByDay(historyToday.getExpenditure());
        info.setPriceByDay(historyToday.getSumPrice());
        info.setIncreaseCustomerDay(newCustomerToday);

        FormTime historyYear=formFuncService.getReportInfoByTime(maxCatalog, minCatalog, yearStart, now);
        Long newCustomerYear=formFuncService.getNewCustomerByTime(maxCatalog,minCatalog,yearStart,now);
        info.setPriceByYear(historyYear.getSumPrice());
        info.setExpenditureByYear(historyYear.getExpenditure());
        info.setIncreaseCustomerYear(newCustomerYear);

        FormTime historyTIme=formFuncService.getReportInfoByTime(maxCatalog, minCatalog, start, end);
        Long newCustomerTime=formFuncService.getNewCustomerByTime(maxCatalog,minCatalog,start,end);
        info.setPriceByTime(historyTIme.getSumPrice());
        info.setExpenditureBytime(historyTIme.getExpenditure());
        info.setMarketPrice(historyTIme.getSumMarketPrice());
        info.setSalePrice(historyTIme.getSumSalePrice());
        info.setIncreaseCustomerTime(newCustomerTime);

        List<FormTime> historyEveryDay=formFuncService.getReportInfoEveryDay(maxCatalog, minCatalog, start, end);
        List<Date> dateList=DateUtil.dateSplit(start,end);


        if (historyEveryDay.size() == 0) {
            for (int i = 0; i < dateList.size(); i++) {
                FormTime model = new FormTime();
                model.setSumPrice(BigDecimal.ZERO);
                model.setExpenditure(0l);
                model.setEveryDay(DateUtil.formatToString(dateList.get(i),"MM-dd"));
                historyEveryDay.add(i, model);
            }

        } else {
            for (int i = 0; i < dateList.size(); i++) {
                if(i>historyEveryDay.size()){
                    String dateEveryday = historyEveryDay.get(i).getEveryDay();
                    Date dateModel = dateList.get(i);
                    String date = DateUtil.formatToString(dateModel, "MM-dd");
                    if (!dateEveryday.equals(date)) {
                        FormTime model = new FormTime();
                        model.setSumPrice(BigDecimal.ZERO);
                        model.setExpenditure(0l);
                        model.setEveryDay(date);
                        historyEveryDay.add(i, model);
                    }
                }
            }
        }
        info.setDayList(historyEveryDay);

        List<FormTime> newCustomerAmount = formFuncService.newCustomerAmount(maxCatalog, minCatalog, start, end);
        if (newCustomerAmount.size() == 0) {
            for (int i = 0; i < dateList.size(); i++) {
                FormTime model = new FormTime();
                model.setNewCustomerAmount(0l);
                model.setEveryDay(DateUtil.formatToString(dateList.get(i), "MM-dd"));
                newCustomerAmount.add(i, model);
            }
        } else {
            for (int i = 0; i < dateList.size(); i++) {
                String dateEveryday = newCustomerAmount.get(i).getEveryDay();
                Date dateModel = dateList.get(i);
                String date=DateUtil.formatToString(dateModel,"MM-dd");
                if (!dateEveryday.equals(date)) {
                    FormTime model = new FormTime();
                    model.setNewCustomerAmount(0l);
                    model.setEveryDay(date);
                    newCustomerAmount.add(i, model);
                }
            }
        }
        info.setNewCustomerAmountList(newCustomerAmount);
        return info;
    }

    @Override
    public Page<UcoinGrandForm> getUcoingrandReport(Long enterpriseId, Date start, Date end, String idCard,Pageable pageable) {
        EnterpriseFunction function;
        if(enterpriseId==null){
            function=currentLoginService.getCurrentLoginEnterpriseFunc();
        }else {
            function = enterpriseFunctionMapper.selectByPrimaryKey(enterpriseId);
        }
        Long maxCatalog=function.getMaxCatalog();
        Long minCatalog=function.getMinCatalog();
        return formFuncService.getucoinGrandForm(idCard, maxCatalog, minCatalog, start, end,pageable);
    }

    @Override
    public Page<UcoinGrandForm> getDetailGrandInfo(Long enterpriseId,Date start,Date end,String idCard,Pageable pageable) {
        EnterpriseFunction function;
        if(enterpriseId==null){
            function=currentLoginService.getCurrentLoginEnterpriseFunc();
        }else {
            function = enterpriseFunctionMapper.selectByPrimaryKey(enterpriseId);
        }
        Long maxCatalog=function.getMaxCatalog();
        Long minCatalog=function.getMinCatalog();
        return formFuncService.getDetailGrandForm(idCard,maxCatalog,minCatalog,start,end,pageable);
    }

    @Override
    public Page<CustomerConsume> getCustomerconsumeReport(String idCard, Date start, Date end, Pageable pageable) {
        EnterpriseFunction function=currentLoginService.getCurrentLoginEnterpriseFunc();
        Long maxCatalog=function.getMaxCatalog();
        Long minCatalog=function.getMinCatalog();
        return formFuncService.getCustomerConsume(idCard,maxCatalog,minCatalog,start,end,pageable);
    }

    @Override
    public Page<CustomerConsume> getDetailConsume(String idCard, Date start, Date end, Pageable pageable) {
        EnterpriseFunction function=currentLoginService.getCurrentLoginEnterpriseFunc();
        Long maxCatalog=function.getMaxCatalog();
        Long minCatalog=function.getMinCatalog();
        return formFuncService.getDetailConsume(idCard,maxCatalog,minCatalog,start,end,pageable);
    }

    @Override
    public Page<FormFunc> getBaseReport(Long enterpriseId, Date start, Date end, Pageable pageable) {
        EnterpriseFunction function=currentLoginService.getCurrentLoginEnterpriseFunc();
        Long maxCatalog=function.getMaxCatalog();
        Long minCatalog=function.getMinCatalog();
        return formFuncService.getNetdata(maxCatalog,minCatalog,start,end,pageable);
    }

}
