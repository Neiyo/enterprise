package com.ylife.ucoin.service.impl;

import com.ylife.exception.UserOperationException;
import com.ylife.ucoin.mapper.CustomerUcoinMapper;
import com.ylife.ucoin.model.CustomerUcoin;
import com.ylife.ucoin.model.HistoryType;
import com.ylife.ucoin.service.CustomerUcoinHistoryService;
import com.ylife.ucoin.service.CustomerUcoinService;
import com.ylife.utils.Assert;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

/**
 * Created by InThEnd on 2016/4/8.
 * CustomerUcoinServiceImpl
 */
@Service
public class CustomerUcoinServiceImpl implements CustomerUcoinService {

    @Resource
    private CustomerUcoinMapper customerUcoinMapper;
    @Resource
    private CustomerUcoinHistoryService customerUcoinHistoryService;

    @Override
    public List<CustomerUcoin> getUcoins(long customerId) {
        return customerUcoinMapper.selectByCustomerId(customerId);
    }

    @Override
    public BigDecimal getUcoinBalance(long customerId) {
        return customerUcoinMapper.sumResePriceByCustomerId(customerId);
    }

    @Override
    public void grandUcoin(long customerId, long enterpriseId, BigDecimal count, Date startTime, Date endTime, String sendType, String remark) {
        Assert.notNull(count);
        Date createDate = new Date();
        if (startTime == null) {
            startTime = createDate;
        }
        CustomerUcoin ucoin = new CustomerUcoin();
        ucoin.setCustomerId(customerId);
        ucoin.setEnterpriseId(enterpriseId);
        ucoin.setCreateTime(createDate);
        ucoin.setStartTime(startTime);
        ucoin.setEndTime(endTime);
        ucoin.setResePrice(count);
        customerUcoinMapper.insertSelective(ucoin);


    }

    @Override
    public void redeemUcoinCode(long customerId, String code) {

    }

    @Override
    @Transactional
    public void deductUcoin(long customerId, long enterpriseId, BigDecimal amount, String remark) {
        Assert.notNull(amount);
        cutUcoin(customerId, amount);
        customerUcoinHistoryService.addHistory(customerId, enterpriseId, null, HistoryType.UCOIN_DEDUCT, amount, null, null, null, remark, null, null);
    }

    @Override
    public void ucoinPay(long customerId, BigDecimal amount, String remark, long orderId) {
        Assert.notNull(amount);
        cutUcoin(customerId, amount);
        customerUcoinHistoryService.addHistory(customerId, null, null, HistoryType.UCOIN_CONSUME, amount, null, null, null, remark, orderId, null);
    }

    /**
     * 减少U宝。
     */
    @Transactional
    private void cutUcoin(long customerId, BigDecimal amount) {
        Assert.notNull(amount);
        BigDecimal remain = amount;
        while (true) {
            CustomerUcoin ucoin = customerUcoinMapper.selectEarliestUcoinByCustomerIdForUpdate(customerId);
            if (ucoin == null) {
                throw new UserOperationException("U宝余额不足。");
            }
            BigDecimal resePrice = ucoin.getResePrice();
            int result = resePrice.compareTo(remain);
            if (result > 0) {
                customerUcoinMapper.updatePriceByPrimaryKey(ucoin.getId(), resePrice.subtract(remain));
                break;
            } else if (result == 0) {
                customerUcoinMapper.deleteByPrimaryKey(ucoin.getId());
                break;
            } else {
                remain = remain.subtract(resePrice);
                customerUcoinMapper.deleteByPrimaryKey(ucoin.getId());
            }
        }
    }

    @Override
    public CustomerUcoin getEarliestUcoin(long customerId) {
        return null;
    }

}
