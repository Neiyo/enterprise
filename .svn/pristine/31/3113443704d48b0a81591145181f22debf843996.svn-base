package com.ylife.chinapost.service.impl;

import com.ylife.chinapost.service.SystemManageService;
import com.ylife.chinapost.service.pojo.ParamValueInfo;
import com.ylife.expression.Expression;
import com.ylife.expression.exception.MagicException;
import com.ylife.system.model.BusinessType;
import com.ylife.system.model.Param;
import com.ylife.system.model.ParamType;
import com.ylife.system.model.ParamValue;
import com.ylife.system.service.BusinessTypeService;
import com.ylife.system.service.ParamService;
import com.ylife.system.service.ParamValueService;
import com.ylife.utils.Assert;
import com.ylife.utils.StringUtil;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by InThEnd on 2016/6/6.
 * SystemManagerServiceImpl
 */
@Service
public class SystemManageServiceImpl implements SystemManageService {

    @Resource
    private BusinessTypeService businessTypeService;
    @Resource
    private ParamService paramService;
    @Resource
    private ParamValueService paramValueService;

    @Override
    public List<BusinessType> getAll() {
        List<BusinessType> types = businessTypeService.getAll();
        for (BusinessType type : types) {
            String ex = type.getExpression();
            if (!StringUtil.isBlank(ex)) {
                Expression expression = Expression.create(ex);
                Map<Integer, String> map = new HashMap<>();
                List<Param> params = type.getParams();
                for (Param param : params) {
                    if (param.getRequired()) {
                        map.put(param.getParamId(), param.getParamName());
                    }
                }
                map.put(Param.DISCOUNT_ID, Param.DISCOUNT_NAME);
                try {
                    type.setExpression(expression.magic(map));
                } catch (MagicException e) {
                    throw new IllegalArgumentException(e.getMessage());
                }
            }
        }
        return types;
    }

    @Override
    public List<Param> getComputableParam(int typeId) {
        return paramService.getComputableParam(typeId);
    }

    @Override
    public BusinessType addBusinessType(String name, Integer serialNo) {
        return businessTypeService.creatBusinessType(name, serialNo);
    }

    @Override
    public void editBusinessType(int typeId, String name, Boolean enabled) {
        businessTypeService.editBusinessType(typeId, name, enabled);
    }

    @Override
    public void deleteBusinessType(int typeId) {
        businessTypeService.deleteBusinessType(typeId);
    }


    @Override
    @Transactional
    public Param addParam(int typeId, ParamType paramType, String name, boolean required, Integer serialNo, List<ParamValueInfo> valueInfos) {
        Assert.notNull(paramType, "参数类型不能为空。");
        Param param = paramService.createParam(typeId, paramType, name, required, serialNo);
        List<ParamValue> values = new ArrayList<>();
        if (paramType == ParamType.TYPE_ENUM && valueInfos != null) {
            for (int i = 0; i < valueInfos.size(); i++) {
                ParamValueInfo info = valueInfos.get(i);
                ParamValue paramValue = paramValueService.createParamValue(param.getParamId(), info.getParamValueName(), info.getParamValue(), true, i);
                values.add(paramValue);
            }
        }
        param.setParamValues(values);
        return param;
    }

    @Override
    public void editParam(int paramId, String name, Boolean required, Boolean enabled) {
        paramService.editParam(paramId, null, name, required, enabled);
    }

    @Override
    public ParamValue addParamValue(int paramId, String name, BigDecimal value, boolean enabled, Integer serialNo) {
        return paramValueService.createParamValue(paramId, name, value, enabled, serialNo);
    }

    @Override
    public void deleteParam(int paramId) {
        paramService.deleteParam(paramId);
    }

    @Override
    @Transactional
    public void editParamValue(int valueId, String name, BigDecimal value, Boolean enabled) {
        paramValueService.editParamValue(valueId, name, value, enabled);
    }

    @Override
    public void deleteParamValue(int valueId) {
        paramValueService.deleteParamValue(valueId);
    }


    @Override
    public void editExpression(int typeId, String expression) {
        businessTypeService.editExpression(typeId, expression);
    }

    @Override
    public void updateTypeSerial(Map<Integer, Integer> map) {
        businessTypeService.updateSerialNo(map);
    }

    @Override
    public void updateParamSerial(Map<Integer, Integer> map) {
        paramService.updateSerialNo(map);
    }

    @Override
    public void updateParamValueSerial(Map<Integer, Integer> map) {
        paramValueService.updateSerialNo(map);
    }
}
