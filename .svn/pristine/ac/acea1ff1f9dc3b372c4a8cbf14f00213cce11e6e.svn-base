package com.ylife.chinapost.service.impl;

import com.ylife.chinapost.service.CurrentLoginService;
import com.ylife.chinapost.service.ValetOrderService;
import com.ylife.customer.model.ChinapostCustomer;
import com.ylife.customer.model.CustomerAddress;
import com.ylife.customer.service.ChinapostCustomerService;
import com.ylife.customer.service.CustomerAddressService;
import com.ylife.customer.service.CustomerWithUcoinInfoService;
import com.ylife.data.page.Page;
import com.ylife.data.page.PageImpl;
import com.ylife.data.page.Pageable;
import com.ylife.enterprise.model.EnterpriseFunction;
import com.ylife.enterprise.model.EnterpriseInfo;
import com.ylife.exception.RecordNotFoundException;
import com.ylife.exception.UserOperationException;
import com.ylife.inventory.mapper.pojo.GoodsManagerResult;
import com.ylife.inventory.model.Inventory;
import com.ylife.inventory.model.InventoryKey;
import com.ylife.inventory.service.InventoryService;
import com.ylife.order.mapper.OrderMapper;
import com.ylife.order.model.Order;
import com.ylife.order.model.OrderGoods;
import com.ylife.order.service.OrderService;
import com.ylife.product.mapper.GoodsInfoMapper;
import com.ylife.product.model.GoodsInfo;
import com.ylife.ucoin.service.CustomerUcoinService;
import com.ylife.utils.Assert;
import com.ylife.utils.StringUtil;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.math.BigDecimal;
import java.util.List;

/**
 * Created by InThEnd on 2016/4/29.
 * ValetOrderServiceImpl
 */
@Service
public class ValetOrderServiceImpl implements ValetOrderService {

    @Resource
    private OrderService orderService;
    @Resource
    private CustomerAddressService customerAddressService;
    @Resource
    private CurrentLoginService currentLoginService;
    @Resource
    private GoodsInfoMapper goodsInfoMapper;
    @Resource
    private CustomerWithUcoinInfoService customerWithUcoinInfoService;
    @Resource
    private OrderMapper orderMapper;
    @Resource
    private InventoryService inventoryService;
    @Resource
    private CustomerUcoinService customerUcoinService;
    @Resource
    private ChinapostCustomerService chinapostCustomerService;

    @Override
    public Page<GoodsManagerResult> getValetGoods(String goodsInfoName, BigDecimal lowPrice, BigDecimal highPrice, Pageable pageable) {
        List<GoodsManagerResult> goodsManagerResults = goodsInfoMapper.selectValetGoods(goodsInfoName, lowPrice, highPrice, pageable);
        int totalElements = goodsInfoMapper.countValeGoodsResult(goodsInfoName, lowPrice, highPrice);
        return new PageImpl<>(pageable, totalElements, goodsManagerResults);
    }

    @Override
    public GoodsInfo getValetGoodsByGoodsInfoId(long goodsInfoId) {
        return goodsInfoMapper.selectByPrimaryKey(goodsInfoId);
    }

    @Override
    @Transactional
    public Order placeOrder(long customerId, boolean isOnline, Long addressId, long goodsId, int count) {
        Assert.isTrue(count > 0, "数量必须大于0");
        ChinapostCustomer customer = chinapostCustomerService.getCustomer(customerId);
        Assert.notNull(customer, "用户不存在。");
        if (!customer.getIsActive() && isOnline) {
            throw new UserOperationException("未激活用户无法下物流单。");
        }
        EnterpriseFunction function = currentLoginService.getCurrentLoginEnterpriseFunc();
        long enterpriseId = function.getId();
        if (!function.getHasPermit()) {
            throw new UserOperationException("此网点无代客下单免验证权限。");
        }
        List<Order> orders = orderService.submitOrder(customerId, addressId, goodsId, count, !isOnline, enterpriseId, currentLoginService.getCurrentLoginUsername());
        //代客自提验证库存，代客物流不验证库存
        if (!isOnline) {
            inventoryService.addAvailableInventory(new InventoryKey(enterpriseId, goodsId), -count);
        }
        return orders.get(0);

    }

    @Override
    public EnterpriseInfo getEnterpriseInfo() {
        return currentLoginService.getCurrentLoginEnterpriseInfo();
    }

    @Override
    public ChinapostCustomer getCustomerInfo(String idCard) {
        return customerWithUcoinInfoService.getInfo(idCard);
    }


    @Override
    public GoodsInfo getGoodsInfo(long goodsInfoId) {
        return goodsInfoMapper.selectByPrimaryKey(goodsInfoId);
    }

    @Override
    public List<CustomerAddress> getAddresses(long customerId) {
        return customerAddressService.queryCustomerAddress(customerId);
    }

    @Override
    public CustomerAddress addAddress(long customerId, String addressName, String addressDetail, String addressMoblie, String isDefault,
                                      String infoProvince, String infoCity, String infoCounty, String infoStreet, String addressZip, String addressPhone) {
        //如果新添加地址设置为默认了，就把用户之前添加的地址设置为不是默认
        if (("1").equals(isDefault)) {
            // 地址列表
            List<CustomerAddress> addresses = customerAddressService.queryCustomerAddress(customerId);
            for (CustomerAddress item : addresses) {
                item.setIsDefault("0");
                customerAddressService.updateAddress(item, customerId);
            }
        }
        if (StringUtil.isBlank(isDefault)) {
            isDefault = "0";
        }
        CustomerAddress customerAddress = new CustomerAddress();
        customerAddress.setCustomerId(customerId);
        customerAddress.setAddressName(addressName);
        customerAddress.setAddressDetail(addressDetail);
        customerAddress.setAddressMoblie(addressMoblie);
        customerAddress.setIsDefault(isDefault);
        customerAddress.setInfoProvince(infoProvince);
        customerAddress.setInfoCity(infoCity);
        customerAddress.setInfoCounty(infoCounty);
        customerAddress.setInfoStreet(infoStreet);
        customerAddress.setAddressZip(addressZip);
        customerAddress.setAddressPhone(addressPhone);
        customerAddressService.addAddress(customerAddress, customerId);
        return customerAddress;
    }

    @Override
    public void deleteAddress(long addressId) {
        customerAddressService.deleteAddress(addressId);
    }

    @Override
    @Transactional
    public Order payOrder(long orderCode) {
        Order order = orderService.getOrder(orderCode);
        long enterpriseId = order.getEnterpriseId();
        long goodsId = order.getOrderGoodsList().get(0).getGoodsInfoId();
        int count = (int) (long) (order.getOrderGoodsList().get(0).getGoodsInfoNum());
        orderService.payOrder(orderCode);
        inventoryService.addActuallyInventory(new InventoryKey(enterpriseId, goodsId), -count);
        customerUcoinService.ucoinPay(order.getCustomerId(), order.getOrderPrice(), null, order.getOrderId());
        return orderMapper.selectByOrderCode(orderCode);
    }

    @Override
    public Order getOrderByDeliveryCode(String deliveryCode) {
        Order order = orderMapper.selectByDeliveryCode(deliveryCode);
        if (order == null) {
            throw new RecordNotFoundException("订单不存在。");
        }
        return order;
    }

    @Override
    public Order getOrderByCode(long code) {
        return orderService.getOrder(code);
    }

    @Override
    @Transactional
    public void pickUpOrder(String deliveryCode) {
        Order order = getOrderByDeliveryCode(deliveryCode);
        if (order == null) {
            throw new RecordNotFoundException("订单不存在。");
        }
        Long enterpriseId = currentLoginService.getCurrentLoginEnterpriseId();
        if (!order.getEnterpriseId().equals(enterpriseId)) {
            throw new RecordNotFoundException("该提货码不属于该网点！");
        }
        long orderCode = order.getOrderCode();
        //提货
        orderService.pickUpOrder(orderCode);
        //修改库存
        Order order2 = orderService.getOrder(orderCode);
        if (order2 != null) {
            for (OrderGoods orderGoods : order.getOrderGoodsList()) {
                inventoryService.addActuallyInventory(new InventoryKey(order.getEnterpriseId(), orderGoods.getGoodsInfoId()), -orderGoods.getGoodsInfoNum().intValue());
            }
        }
    }

    @Override
    public boolean hasPermit() {
        EnterpriseFunction function = currentLoginService.getCurrentLoginEnterpriseFunc();
        return function.getHasPermit();
    }

    @Override
    public boolean hasInventory(long goodInfoId) {
        long enterpriseId = currentLoginService.getCurrentLoginEnterpriseId();
        Inventory inventory = inventoryService.getInventory(enterpriseId, goodInfoId);
        return inventory != null && inventory.getAvailable() > 0;
    }

    @Override
    public BigDecimal getCustomerBalance(String idCard) {
        ChinapostCustomer customer = chinapostCustomerService.getCustomer(idCard);
        if (customer == null) {
            return BigDecimal.ZERO;
        }
        return customerUcoinService.getUcoinBalance(customer.getId());
    }
}
