package com.ylife.chinapost.service.impl;

import com.ylife.chinapost.service.CurrentLoginService;
import com.ylife.chinapost.service.OrderManageService;
import com.ylife.data.page.Page;
import com.ylife.data.page.Pageable;
import com.ylife.enterprise.model.EnterpriseFunction;
import com.ylife.exception.UserOperationException;
import com.ylife.inventory.model.InventoryKey;
import com.ylife.inventory.service.InventoryService;
import com.ylife.order.model.*;
import com.ylife.order.service.CreditOrderService;
import com.ylife.order.service.OrderService;
import com.ylife.ucoin.model.HistoryType;
import com.ylife.ucoin.service.CustomerUcoinHistoryService;
import com.ylife.ucoin.service.CustomerUcoinService;
import com.ylife.utils.Assert;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

/**
 * Created by InThEnd on 2016/5/2.
 * OrderManageServiceImpl
 */
@Service
public class OrderManageServiceImpl implements OrderManageService {

    @Resource
    private CreditOrderService creditOrderService;
    @Resource
    private CustomerUcoinService customerUcoinService;
    @Resource
    private OrderService orderService;
    @Resource
    private CurrentLoginService currentLoginService;
    @Resource
    private CustomerUcoinHistoryService customerUcoinHistoryService;
    @Resource
    private InventoryService inventoryService;


    @Override
    public Page<Order> getOrders(Long orderNo,
                                 OrderStatus status,
                                 Boolean isValet,
                                 String username,
                                 String receiver,
                                 String contactPhone,
                                 Date createStart,
                                 Date createEnd,
                                 Date payStart,
                                 Date payEnd,
                                 Pageable pageable) {
        EnterpriseFunction function = currentLoginService.getCurrentLoginEnterpriseFunc();
        Order model = new Order();
        if (status != null) {
            model.setOrderStatus(status);
        }
        if (function.getParentId() != null) {
            model.setEnterpriseId(function.getId());
        }
        model.setIsValet(isValet);
        model.setOrderCode(orderNo);
        //model.setShippingPhone(contactPhone);
        model.setShippingPerson(receiver);
        model.setShippingMobile(contactPhone);
        return orderService.getOrder(model, username, createStart, createEnd, payStart, payEnd, pageable);
    }

    @Override
    public Page<CreditOrder> getBackOrder(Long backOrderNo,
                                          String phoneNo,
                                          Long orderNo,
                                          CreditOrderStatus status,
                                          Date start,
                                          Date end,
                                          Pageable pageable) {
        return creditOrderService.getBackOrder(backOrderNo, phoneNo, orderNo, status, start, end, pageable);
    }

    @Override
    @Transactional
    public void reviewCreditOrder(long creditOrderNo, boolean agree, String message) {
        //1、非顶级企业审核退货单
        creditOrderService.reviewCreditOrder(creditOrderNo, agree, message);
        //2、修改订单状态
        CreditOrder creditOrder = creditOrderService.selectByCreditOrderCode(creditOrderNo);
        OrderStatus status = OrderStatus.REFUND_WAIT_REFUND;//退款待退款(同意退款)
        switch (creditOrder.getBackCheck()) {
            case REFUND_DENIED:
                status = OrderStatus.REFUND_DENIED;//退款已拒绝(拒绝退款)
                break;
            case RETURN_DELIVERING:
                status = OrderStatus.RETURN_WAIT_DENIED;//待商家收货(同意退货)
                break;
            case RETURN_DENIED:
                status = OrderStatus.RETURN_DENIED;//退货已拒绝(拒绝退货)
                break;
        }
        orderService.editStatus(creditOrder.getOrder().getOrderCode(), status);

    }

    @Override
    @Transactional
    public void receiveCreditOrder(long creditOrderNo, boolean receive, String enterpriseMsg, String customerMsg) {
        //1、非顶级企业退货单收货
        creditOrderService.receiveCreditOrder(creditOrderNo, receive, enterpriseMsg, customerMsg);
        //2、修改订单状态
        CreditOrder creditOrder = creditOrderService.selectByCreditOrderCode(creditOrderNo);
        OrderStatus status = OrderStatus.RETURN_WAIT_REFUND;//退货待退款(同意退货)
        switch (creditOrder.getBackCheck()) {
            case RETURN_DELIVER_FAILURE:
                status = OrderStatus.RETURN_DELIVER_FAILURE;//退货收货失败
                break;
        }
        orderService.editStatus(creditOrder.getOrder().getOrderCode(), status);
    }

    @Override
    @Transactional
    public void refund(long creditOrderNo, BigDecimal price, String msg) {
        if (!currentLoginService.isPrimaryEnterprise()) {
            throw new UserOperationException("非顶级账户无权操作。");
        }
        //顶级企业退款
        creditOrderService.refund(creditOrderNo, price, msg);
        //2、修改订单状态
        CreditOrder creditOrder = creditOrderService.selectByCreditOrderCode(creditOrderNo);
        OrderStatus status = OrderStatus.RETURN_FINISHED;//退货已完成
        switch (creditOrder.getBackCheck()) {
            case REFUND_FINISHED:
                status = OrderStatus.REFUND_FINISHED;//退款已完成
                break;
        }
        orderService.editStatus(creditOrder.getOrder().getOrderCode(), status);
        //3、退款给客户
        customerUcoinService.grandUcoin(creditOrder.getCustomerId(), 1l, price, null, null, null, msg);
        //4、退款日志
        customerUcoinHistoryService.addHistory(creditOrder.getCustomerId(), 1l, null, HistoryType.UCOIN_REFUND, price, null, null, null, null, null, null);
    }

    @Override
    public CreditOrderStatus[] getStatuses() {
        return CreditOrderStatus.values();
    }

    @Override
    public OrderStatus[] getOrderStatuses() {
        return OrderStatus.values();
    }

    @Override
    @Transactional
    public void statusToPayed(long orderCode) {
        Order order = orderService.getOrder(orderCode);
        Assert.notNull(order, "订单不存在。");
        long enterpriseId = order.getEnterpriseId();
        long goodsId = order.getOrderGoodsList().get(0).getGoodsInfoId();
        int count = (int) (long) (order.getOrderGoodsList().get(0).getGoodsInfoNum());
        orderService.payOrder(orderCode);
        inventoryService.addActuallyInventory(new InventoryKey(enterpriseId, goodsId), -count);
    }

    @Override
    @Transactional
    public void cancelOrder(long orderCode) {
        Order order = orderService.getOrder(orderCode);
        Assert.notNull(order, "订单不存在。");
        long enterpriseId = order.getEnterpriseId();
        long goodsId = order.getOrderGoodsList().get(0).getGoodsInfoId();
        int count = (int) (long) (order.getOrderGoodsList().get(0).getGoodsInfoNum());
        orderService.cancelOrder(orderCode);
        inventoryService.addAvailableInventory(new InventoryKey(enterpriseId, goodsId), count);

    }

    @Override
    public void editPrice(long orderCode, BigDecimal price) {
        if (!currentLoginService.isPrimaryEnterprise()) {
            throw new UserOperationException("非顶级账户无权操作。");
        }
        orderService.editPrice(orderCode, price);
    }

    @Override
    @Transactional
    public void chargeBackOrder(long orderCode, List<Long> ids, CreditOrderReason reason, CredentialType type) {
        Order order = orderService.getOrder(orderCode);
        //订单已完成、自提点为本网点的自提单 才可以代客退货
        if (order.getOrderStatus() == OrderStatus.RECIEVED && order.getSelfPick() && order.getEnterpriseId().equals(currentLoginService.getCurrentLoginEnterpriseId())) {
            //1、代客退货，退单状态为退货待退款
            creditOrderService.createCreditOrder(orderCode, ids.get(0).toString().concat(",1-"), reason, type, null, null, "2", CreditOrderStatus.RETURN_WAIT_REFUND);
            //2、修改订单状态
            orderService.editStatus(orderCode, OrderStatus.RETURN_WAIT_REFUND);
        }
    }

    /**
     * 定时取消订单（代客下单未支付）
     */
    @Override
    public void cancelOrderTiming (){
        List<Order> valetSubmitOrders = orderService.selectByValetSubmit();
        for(Order order:valetSubmitOrders){
            cancelOrder(order.getOrderCode());
        }
    }


    @Override
    public void valetBackOrder(long orderNo, String backGoodsId,CreditOrderReason reason, CredentialType credential, String credentialDoc, String remark, String backWay) {
        Order order=orderService.getOrder(orderNo);
        if(order.getEnterpriseId()==currentLoginService.getCurrentLoginEnterpriseId() && order.getOrderStatus().equals(OrderStatus.RETURN_FINISHED)){
            creditOrderService.createCreditOrder(orderNo,backGoodsId,reason,credential,credentialDoc,remark,backWay,CreditOrderStatus.RETURN_WAIT_REFUND);
            orderService.editStatus(orderNo, OrderStatus.RETURN_WAIT_REFUND);
        }
    }
}
